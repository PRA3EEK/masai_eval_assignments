Q5) Explain Difference between Upper Bounded Wildcards and Lower Bounded Wildcards with Example.
Answer The upper bound wildcards restricts the unknown type to be the subtype of a specific type.
       It can be applied using the (?) followed by an "extends" keyword in case of a class and "implements" in 
       case of an interface and the we write the name of the type , while on the other hand lower bound 
       restricts the type to be super type of a specific type. it can be declared by using the same symbol(?) 
       followed by a "super" keyword which is followed by the type we want to be the upper bound.
       
       Syntex for upper bound:
       
       List<? extends Number>
       
       example of upper bound 
       import java.util.*;
       abstract class Shape{
       abstract void draw();
       }
       class Rectangle extends Shape{
       void draw(){
       System.out.println("drawing rectangle");
       }
       }
       class Circle extends Shape{
       void draw(){
       System.out.println("drawing circle");
       }
       }
       class Main{
       //creating a method that accepts only child class of Shape
       public static void drawShapes(List<? extends Shape> lists){
       for(Shape s:lists){
       s.draw();//calling method of Shape class by child class instance
       }
       }
       public static void main(String args[]){
       List<Rectangle> list1=new ArrayList<Rectangle>();
       list1.add(new Rectangle());
       List<Circle> list2=new ArrayList<Circle>();
       list2.add(new Circle());
       list2.add(new Circle());
       drawShapes(list1);
       drawShapes(list2);
       }
       }       
       
       Syntex for lowerbound:
       
       List<? super Integer>
       
       example of lowerbound:
       
       import java.util.Arrays;
       import java.util.List;
       public class Main {
       public static void addNumbers(List<? super Integer> list) {
       for(Object n:list)
       {
       System.out.println(n);
       }
       }
       public static void main(String[] args) {
       List<Integer> l1=Arrays.asList(1,2,3);
       System.out.println("displaying the Integer values");
       addNumbers(l1);
       List<Number> l2=Arrays.asList(1.0,2.0,3.0);
       System.out.println("displaying the Number values");
       addNumbers(l2);
       }
       }       